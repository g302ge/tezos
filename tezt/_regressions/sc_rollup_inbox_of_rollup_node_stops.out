tezt/_regressions/sc_rollup_inbox_of_rollup_node_stops.out

./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 1600.648 units (will add 100 for safety)
Estimated storage: 6522 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000402
    Expected counter: 1
    Gas limit: 1701
    Storage limit: 6542 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000402
      payload fees(the block proposer) ....... +ꜩ0.000402
    Originate smart contract rollup of kind arith with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 1600.648
      Storage size: 6522 bytes
      Address: [SC_ROLLUP_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.6305
        storage fees ........................... +ꜩ1.6305


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1620.756 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00045
    Expected counter: 2
    Gas limit: 1721
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00045
      payload fees(the block proposer) ....... +ꜩ0.00045
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1620.884
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 3
         current messages hash  = CoWRmdEAYVrrgP3b41D4JGBBcWE7yAwDUpsmByQkKgrXgGBXa919
         nb_available_messages = 1
         message_counter = 1
         old_levels_messages = 
       content = CoUkdBQ53N7FWav8LuTvrcp3jyoxnpqk3xnEo3gSCgNwia4fq44j
       index = 1
       back_pointers = CoVawGHT9AxoKnd7hDBCii5PEcM2U3WbtL4L5HGD6PC9BWcLnzqD
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE", "CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1620.948 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000458
    Expected counter: 3
    Gas limit: 1721
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000458
      payload fees(the block proposer) ....... +ꜩ0.000458
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1621.076
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 4
         current messages hash  = CoV1TJhtsn29pgzZGuqfHuifzL9ATej8SZHvBhRP2Vn5VZL92qS7
         nb_available_messages = 3
         message_counter = 2
         old_levels_messages = 
       content = CoWRmdEAYVrrgP3b41D4JGBBcWE7yAwDUpsmByQkKgrXgGBXa919
       index = 2
       back_pointers = CoUmDifn9cHq3g1wRc8ft64oMz7Jha8f4mcUWZd2YRseVae6MQAN
      CoUmDifn9cHq3g1wRc8ft64oMz7Jha8f4mcUWZd2YRseVae6MQAN
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1621.140 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00045
    Expected counter: 4
    Gas limit: 1722
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00045
      payload fees(the block proposer) ....... +ꜩ0.00045
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1621.140
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 5
         current messages hash  = CoWRmdEAYVrrgP3b41D4JGBBcWE7yAwDUpsmByQkKgrXgGBXa919
         nb_available_messages = 4
         message_counter = 1
         old_levels_messages = 
       content = CoV1TJhtsn29pgzZGuqfHuifzL9ATej8SZHvBhRP2Vn5VZL92qS7
       index = 3
       back_pointers = CoWKpZY8qq5LbUsnCireMyffiZDhvee6xQPXKaRGkuvsoP2eLMQP
      CoUmDifn9cHq3g1wRc8ft64oMz7Jha8f4mcUWZd2YRseVae6MQAN
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE", "CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1621.140 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000458
    Expected counter: 5
    Gas limit: 1722
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000458
      payload fees(the block proposer) ....... +ꜩ0.000458
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1621.268
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 6
         current messages hash  = CoV1TJhtsn29pgzZGuqfHuifzL9ATej8SZHvBhRP2Vn5VZL92qS7
         nb_available_messages = 6
         message_counter = 2
         old_levels_messages = 
       content = CoWRmdEAYVrrgP3b41D4JGBBcWE7yAwDUpsmByQkKgrXgGBXa919
       index = 4
       back_pointers = CoVkRariwFAf2vpkyzRwQQEFijiz6WEqkTTpgo7x6jMvn5t7VmJM
      CoVkRariwFAf2vpkyzRwQQEFijiz6WEqkTTpgo7x6jMvn5t7VmJM
      CoVkRariwFAf2vpkyzRwQQEFijiz6WEqkTTpgo7x6jMvn5t7VmJM
    
    

